// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jloom6/jorm (interfaces: Interface,Row,Rows)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	sql "database/sql"
	mysql "github.com/go-sql-driver/mysql"
	gomock "github.com/golang/mock/gomock"
	gorm "github.com/jinzhu/gorm"
	jorm "github.com/jloom6/jorm"
	reflect "reflect"
)

// MockInterface is a mock of Interface interface
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// AddError mocks base method
func (m *MockInterface) AddError(arg0 error) error {
	ret := m.ctrl.Call(m, "AddError", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddError indicates an expected call of AddError
func (mr *MockInterfaceMockRecorder) AddError(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddError", reflect.TypeOf((*MockInterface)(nil).AddError), arg0)
}

// AddForeignKey mocks base method
func (m *MockInterface) AddForeignKey(arg0, arg1, arg2, arg3 string) jorm.Interface {
	ret := m.ctrl.Call(m, "AddForeignKey", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(jorm.Interface)
	return ret0
}

// AddForeignKey indicates an expected call of AddForeignKey
func (mr *MockInterfaceMockRecorder) AddForeignKey(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddForeignKey", reflect.TypeOf((*MockInterface)(nil).AddForeignKey), arg0, arg1, arg2, arg3)
}

// AddIndex mocks base method
func (m *MockInterface) AddIndex(arg0 string, arg1 ...string) jorm.Interface {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddIndex", varargs...)
	ret0, _ := ret[0].(jorm.Interface)
	return ret0
}

// AddIndex indicates an expected call of AddIndex
func (mr *MockInterfaceMockRecorder) AddIndex(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddIndex", reflect.TypeOf((*MockInterface)(nil).AddIndex), varargs...)
}

// AddUniqueIndex mocks base method
func (m *MockInterface) AddUniqueIndex(arg0 string, arg1 ...string) jorm.Interface {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddUniqueIndex", varargs...)
	ret0, _ := ret[0].(jorm.Interface)
	return ret0
}

// AddUniqueIndex indicates an expected call of AddUniqueIndex
func (mr *MockInterfaceMockRecorder) AddUniqueIndex(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUniqueIndex", reflect.TypeOf((*MockInterface)(nil).AddUniqueIndex), varargs...)
}

// Assign mocks base method
func (m *MockInterface) Assign(arg0 ...interface{}) jorm.Interface {
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Assign", varargs...)
	ret0, _ := ret[0].(jorm.Interface)
	return ret0
}

// Assign indicates an expected call of Assign
func (mr *MockInterfaceMockRecorder) Assign(arg0 ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Assign", reflect.TypeOf((*MockInterface)(nil).Assign), arg0...)
}

// Association mocks base method
func (m *MockInterface) Association(arg0 string) *gorm.Association {
	ret := m.ctrl.Call(m, "Association", arg0)
	ret0, _ := ret[0].(*gorm.Association)
	return ret0
}

// Association indicates an expected call of Association
func (mr *MockInterfaceMockRecorder) Association(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Association", reflect.TypeOf((*MockInterface)(nil).Association), arg0)
}

// Attrs mocks base method
func (m *MockInterface) Attrs(arg0 ...interface{}) jorm.Interface {
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Attrs", varargs...)
	ret0, _ := ret[0].(jorm.Interface)
	return ret0
}

// Attrs indicates an expected call of Attrs
func (mr *MockInterfaceMockRecorder) Attrs(arg0 ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attrs", reflect.TypeOf((*MockInterface)(nil).Attrs), arg0...)
}

// AutoMigrate mocks base method
func (m *MockInterface) AutoMigrate(arg0 ...interface{}) jorm.Interface {
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AutoMigrate", varargs...)
	ret0, _ := ret[0].(jorm.Interface)
	return ret0
}

// AutoMigrate indicates an expected call of AutoMigrate
func (mr *MockInterfaceMockRecorder) AutoMigrate(arg0 ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutoMigrate", reflect.TypeOf((*MockInterface)(nil).AutoMigrate), arg0...)
}

// Begin mocks base method
func (m *MockInterface) Begin() jorm.Interface {
	ret := m.ctrl.Call(m, "Begin")
	ret0, _ := ret[0].(jorm.Interface)
	return ret0
}

// Begin indicates an expected call of Begin
func (mr *MockInterfaceMockRecorder) Begin() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockInterface)(nil).Begin))
}

// BlockGlobalUpdate mocks base method
func (m *MockInterface) BlockGlobalUpdate(arg0 bool) jorm.Interface {
	ret := m.ctrl.Call(m, "BlockGlobalUpdate", arg0)
	ret0, _ := ret[0].(jorm.Interface)
	return ret0
}

// BlockGlobalUpdate indicates an expected call of BlockGlobalUpdate
func (mr *MockInterfaceMockRecorder) BlockGlobalUpdate(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockGlobalUpdate", reflect.TypeOf((*MockInterface)(nil).BlockGlobalUpdate), arg0)
}

// Callback mocks base method
func (m *MockInterface) Callback() *gorm.Callback {
	ret := m.ctrl.Call(m, "Callback")
	ret0, _ := ret[0].(*gorm.Callback)
	return ret0
}

// Callback indicates an expected call of Callback
func (mr *MockInterfaceMockRecorder) Callback() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Callback", reflect.TypeOf((*MockInterface)(nil).Callback))
}

// Close mocks base method
func (m *MockInterface) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockInterfaceMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockInterface)(nil).Close))
}

// Commit mocks base method
func (m *MockInterface) Commit() jorm.Interface {
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(jorm.Interface)
	return ret0
}

// Commit indicates an expected call of Commit
func (mr *MockInterfaceMockRecorder) Commit() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockInterface)(nil).Commit))
}

// CommonDB mocks base method
func (m *MockInterface) CommonDB() gorm.SQLCommon {
	ret := m.ctrl.Call(m, "CommonDB")
	ret0, _ := ret[0].(gorm.SQLCommon)
	return ret0
}

// CommonDB indicates an expected call of CommonDB
func (mr *MockInterfaceMockRecorder) CommonDB() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommonDB", reflect.TypeOf((*MockInterface)(nil).CommonDB))
}

// Count mocks base method
func (m *MockInterface) Count(arg0 interface{}) jorm.Interface {
	ret := m.ctrl.Call(m, "Count", arg0)
	ret0, _ := ret[0].(jorm.Interface)
	return ret0
}

// Count indicates an expected call of Count
func (mr *MockInterfaceMockRecorder) Count(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockInterface)(nil).Count), arg0)
}

// Create mocks base method
func (m *MockInterface) Create(arg0 interface{}) jorm.Interface {
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(jorm.Interface)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockInterfaceMockRecorder) Create(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockInterface)(nil).Create), arg0)
}

// CreateTable mocks base method
func (m *MockInterface) CreateTable(arg0 ...interface{}) jorm.Interface {
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTable", varargs...)
	ret0, _ := ret[0].(jorm.Interface)
	return ret0
}

// CreateTable indicates an expected call of CreateTable
func (mr *MockInterfaceMockRecorder) CreateTable(arg0 ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTable", reflect.TypeOf((*MockInterface)(nil).CreateTable), arg0...)
}

// DB mocks base method
func (m *MockInterface) DB() *sql.DB {
	ret := m.ctrl.Call(m, "DB")
	ret0, _ := ret[0].(*sql.DB)
	return ret0
}

// DB indicates an expected call of DB
func (mr *MockInterfaceMockRecorder) DB() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DB", reflect.TypeOf((*MockInterface)(nil).DB))
}

// Debug mocks base method
func (m *MockInterface) Debug() jorm.Interface {
	ret := m.ctrl.Call(m, "Debug")
	ret0, _ := ret[0].(jorm.Interface)
	return ret0
}

// Debug indicates an expected call of Debug
func (mr *MockInterfaceMockRecorder) Debug() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockInterface)(nil).Debug))
}

// Delete mocks base method
func (m *MockInterface) Delete(arg0 interface{}, arg1 ...interface{}) jorm.Interface {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(jorm.Interface)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockInterfaceMockRecorder) Delete(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockInterface)(nil).Delete), varargs...)
}

// Dialect mocks base method
func (m *MockInterface) Dialect() gorm.Dialect {
	ret := m.ctrl.Call(m, "Dialect")
	ret0, _ := ret[0].(gorm.Dialect)
	return ret0
}

// Dialect indicates an expected call of Dialect
func (mr *MockInterfaceMockRecorder) Dialect() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dialect", reflect.TypeOf((*MockInterface)(nil).Dialect))
}

// DropColumn mocks base method
func (m *MockInterface) DropColumn(arg0 string) jorm.Interface {
	ret := m.ctrl.Call(m, "DropColumn", arg0)
	ret0, _ := ret[0].(jorm.Interface)
	return ret0
}

// DropColumn indicates an expected call of DropColumn
func (mr *MockInterfaceMockRecorder) DropColumn(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropColumn", reflect.TypeOf((*MockInterface)(nil).DropColumn), arg0)
}

// DropTable mocks base method
func (m *MockInterface) DropTable(arg0 ...interface{}) jorm.Interface {
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DropTable", varargs...)
	ret0, _ := ret[0].(jorm.Interface)
	return ret0
}

// DropTable indicates an expected call of DropTable
func (mr *MockInterfaceMockRecorder) DropTable(arg0 ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropTable", reflect.TypeOf((*MockInterface)(nil).DropTable), arg0...)
}

// DropTableIfExists mocks base method
func (m *MockInterface) DropTableIfExists(arg0 ...interface{}) jorm.Interface {
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DropTableIfExists", varargs...)
	ret0, _ := ret[0].(jorm.Interface)
	return ret0
}

// DropTableIfExists indicates an expected call of DropTableIfExists
func (mr *MockInterfaceMockRecorder) DropTableIfExists(arg0 ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropTableIfExists", reflect.TypeOf((*MockInterface)(nil).DropTableIfExists), arg0...)
}

// Error mocks base method
func (m *MockInterface) Error() error {
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(error)
	return ret0
}

// Error indicates an expected call of Error
func (mr *MockInterfaceMockRecorder) Error() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockInterface)(nil).Error))
}

// Exec mocks base method
func (m *MockInterface) Exec(arg0 string, arg1 ...interface{}) jorm.Interface {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(jorm.Interface)
	return ret0
}

// Exec indicates an expected call of Exec
func (mr *MockInterfaceMockRecorder) Exec(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockInterface)(nil).Exec), varargs...)
}

// Find mocks base method
func (m *MockInterface) Find(arg0 interface{}, arg1 ...interface{}) jorm.Interface {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Find", varargs...)
	ret0, _ := ret[0].(jorm.Interface)
	return ret0
}

// Find indicates an expected call of Find
func (mr *MockInterfaceMockRecorder) Find(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockInterface)(nil).Find), varargs...)
}

// First mocks base method
func (m *MockInterface) First(arg0 interface{}, arg1 ...interface{}) jorm.Interface {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "First", varargs...)
	ret0, _ := ret[0].(jorm.Interface)
	return ret0
}

// First indicates an expected call of First
func (mr *MockInterfaceMockRecorder) First(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "First", reflect.TypeOf((*MockInterface)(nil).First), varargs...)
}

// FirstOrCreate mocks base method
func (m *MockInterface) FirstOrCreate(arg0 interface{}, arg1 ...interface{}) jorm.Interface {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FirstOrCreate", varargs...)
	ret0, _ := ret[0].(jorm.Interface)
	return ret0
}

// FirstOrCreate indicates an expected call of FirstOrCreate
func (mr *MockInterfaceMockRecorder) FirstOrCreate(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirstOrCreate", reflect.TypeOf((*MockInterface)(nil).FirstOrCreate), varargs...)
}

// FirstOrInit mocks base method
func (m *MockInterface) FirstOrInit(arg0 interface{}, arg1 ...interface{}) jorm.Interface {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FirstOrInit", varargs...)
	ret0, _ := ret[0].(jorm.Interface)
	return ret0
}

// FirstOrInit indicates an expected call of FirstOrInit
func (mr *MockInterfaceMockRecorder) FirstOrInit(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirstOrInit", reflect.TypeOf((*MockInterface)(nil).FirstOrInit), varargs...)
}

// Get mocks base method
func (m *MockInterface) Get(arg0 string) (interface{}, bool) {
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockInterfaceMockRecorder) Get(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockInterface)(nil).Get), arg0)
}

// GetErrors mocks base method
func (m *MockInterface) GetErrors() []error {
	ret := m.ctrl.Call(m, "GetErrors")
	ret0, _ := ret[0].([]error)
	return ret0
}

// GetErrors indicates an expected call of GetErrors
func (mr *MockInterfaceMockRecorder) GetErrors() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetErrors", reflect.TypeOf((*MockInterface)(nil).GetErrors))
}

// GetGormDB mocks base method
func (m *MockInterface) GetGormDB() *gorm.DB {
	ret := m.ctrl.Call(m, "GetGormDB")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// GetGormDB indicates an expected call of GetGormDB
func (mr *MockInterfaceMockRecorder) GetGormDB() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGormDB", reflect.TypeOf((*MockInterface)(nil).GetGormDB))
}

// Group mocks base method
func (m *MockInterface) Group(arg0 string) jorm.Interface {
	ret := m.ctrl.Call(m, "Group", arg0)
	ret0, _ := ret[0].(jorm.Interface)
	return ret0
}

// Group indicates an expected call of Group
func (mr *MockInterfaceMockRecorder) Group(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Group", reflect.TypeOf((*MockInterface)(nil).Group), arg0)
}

// HasBlockGlobalUpdate mocks base method
func (m *MockInterface) HasBlockGlobalUpdate() bool {
	ret := m.ctrl.Call(m, "HasBlockGlobalUpdate")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasBlockGlobalUpdate indicates an expected call of HasBlockGlobalUpdate
func (mr *MockInterfaceMockRecorder) HasBlockGlobalUpdate() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasBlockGlobalUpdate", reflect.TypeOf((*MockInterface)(nil).HasBlockGlobalUpdate))
}

// HasTable mocks base method
func (m *MockInterface) HasTable(arg0 interface{}) bool {
	ret := m.ctrl.Call(m, "HasTable", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasTable indicates an expected call of HasTable
func (mr *MockInterfaceMockRecorder) HasTable(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasTable", reflect.TypeOf((*MockInterface)(nil).HasTable), arg0)
}

// Having mocks base method
func (m *MockInterface) Having(arg0 interface{}, arg1 ...interface{}) jorm.Interface {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Having", varargs...)
	ret0, _ := ret[0].(jorm.Interface)
	return ret0
}

// Having indicates an expected call of Having
func (mr *MockInterfaceMockRecorder) Having(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Having", reflect.TypeOf((*MockInterface)(nil).Having), varargs...)
}

// InstantSet mocks base method
func (m *MockInterface) InstantSet(arg0 string, arg1 interface{}) jorm.Interface {
	ret := m.ctrl.Call(m, "InstantSet", arg0, arg1)
	ret0, _ := ret[0].(jorm.Interface)
	return ret0
}

// InstantSet indicates an expected call of InstantSet
func (mr *MockInterfaceMockRecorder) InstantSet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstantSet", reflect.TypeOf((*MockInterface)(nil).InstantSet), arg0, arg1)
}

// Joins mocks base method
func (m *MockInterface) Joins(arg0 string, arg1 ...interface{}) jorm.Interface {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Joins", varargs...)
	ret0, _ := ret[0].(jorm.Interface)
	return ret0
}

// Joins indicates an expected call of Joins
func (mr *MockInterfaceMockRecorder) Joins(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Joins", reflect.TypeOf((*MockInterface)(nil).Joins), varargs...)
}

// Last mocks base method
func (m *MockInterface) Last(arg0 interface{}, arg1 ...interface{}) jorm.Interface {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Last", varargs...)
	ret0, _ := ret[0].(jorm.Interface)
	return ret0
}

// Last indicates an expected call of Last
func (mr *MockInterfaceMockRecorder) Last(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Last", reflect.TypeOf((*MockInterface)(nil).Last), varargs...)
}

// Limit mocks base method
func (m *MockInterface) Limit(arg0 interface{}) jorm.Interface {
	ret := m.ctrl.Call(m, "Limit", arg0)
	ret0, _ := ret[0].(jorm.Interface)
	return ret0
}

// Limit indicates an expected call of Limit
func (mr *MockInterfaceMockRecorder) Limit(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Limit", reflect.TypeOf((*MockInterface)(nil).Limit), arg0)
}

// LogMode mocks base method
func (m *MockInterface) LogMode(arg0 bool) jorm.Interface {
	ret := m.ctrl.Call(m, "LogMode", arg0)
	ret0, _ := ret[0].(jorm.Interface)
	return ret0
}

// LogMode indicates an expected call of LogMode
func (mr *MockInterfaceMockRecorder) LogMode(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogMode", reflect.TypeOf((*MockInterface)(nil).LogMode), arg0)
}

// Model mocks base method
func (m *MockInterface) Model(arg0 interface{}) jorm.Interface {
	ret := m.ctrl.Call(m, "Model", arg0)
	ret0, _ := ret[0].(jorm.Interface)
	return ret0
}

// Model indicates an expected call of Model
func (mr *MockInterfaceMockRecorder) Model(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Model", reflect.TypeOf((*MockInterface)(nil).Model), arg0)
}

// ModifyColumn mocks base method
func (m *MockInterface) ModifyColumn(arg0, arg1 string) jorm.Interface {
	ret := m.ctrl.Call(m, "ModifyColumn", arg0, arg1)
	ret0, _ := ret[0].(jorm.Interface)
	return ret0
}

// ModifyColumn indicates an expected call of ModifyColumn
func (mr *MockInterfaceMockRecorder) ModifyColumn(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyColumn", reflect.TypeOf((*MockInterface)(nil).ModifyColumn), arg0, arg1)
}

// New mocks base method
func (m *MockInterface) New() jorm.Interface {
	ret := m.ctrl.Call(m, "New")
	ret0, _ := ret[0].(jorm.Interface)
	return ret0
}

// New indicates an expected call of New
func (mr *MockInterfaceMockRecorder) New() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockInterface)(nil).New))
}

// NewRecord mocks base method
func (m *MockInterface) NewRecord(arg0 interface{}) bool {
	ret := m.ctrl.Call(m, "NewRecord", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// NewRecord indicates an expected call of NewRecord
func (mr *MockInterfaceMockRecorder) NewRecord(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRecord", reflect.TypeOf((*MockInterface)(nil).NewRecord), arg0)
}

// Not mocks base method
func (m *MockInterface) Not(arg0 interface{}, arg1 ...interface{}) jorm.Interface {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Not", varargs...)
	ret0, _ := ret[0].(jorm.Interface)
	return ret0
}

// Not indicates an expected call of Not
func (mr *MockInterfaceMockRecorder) Not(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Not", reflect.TypeOf((*MockInterface)(nil).Not), varargs...)
}

// Offset mocks base method
func (m *MockInterface) Offset(arg0 interface{}) jorm.Interface {
	ret := m.ctrl.Call(m, "Offset", arg0)
	ret0, _ := ret[0].(jorm.Interface)
	return ret0
}

// Offset indicates an expected call of Offset
func (mr *MockInterfaceMockRecorder) Offset(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Offset", reflect.TypeOf((*MockInterface)(nil).Offset), arg0)
}

// Omit mocks base method
func (m *MockInterface) Omit(arg0 ...string) jorm.Interface {
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Omit", varargs...)
	ret0, _ := ret[0].(jorm.Interface)
	return ret0
}

// Omit indicates an expected call of Omit
func (mr *MockInterfaceMockRecorder) Omit(arg0 ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Omit", reflect.TypeOf((*MockInterface)(nil).Omit), arg0...)
}

// Or mocks base method
func (m *MockInterface) Or(arg0 interface{}, arg1 ...interface{}) jorm.Interface {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Or", varargs...)
	ret0, _ := ret[0].(jorm.Interface)
	return ret0
}

// Or indicates an expected call of Or
func (mr *MockInterfaceMockRecorder) Or(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Or", reflect.TypeOf((*MockInterface)(nil).Or), varargs...)
}

// Order mocks base method
func (m *MockInterface) Order(arg0 interface{}, arg1 ...bool) jorm.Interface {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Order", varargs...)
	ret0, _ := ret[0].(jorm.Interface)
	return ret0
}

// Order indicates an expected call of Order
func (mr *MockInterfaceMockRecorder) Order(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Order", reflect.TypeOf((*MockInterface)(nil).Order), varargs...)
}

// Pluck mocks base method
func (m *MockInterface) Pluck(arg0 string, arg1 interface{}) jorm.Interface {
	ret := m.ctrl.Call(m, "Pluck", arg0, arg1)
	ret0, _ := ret[0].(jorm.Interface)
	return ret0
}

// Pluck indicates an expected call of Pluck
func (mr *MockInterfaceMockRecorder) Pluck(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pluck", reflect.TypeOf((*MockInterface)(nil).Pluck), arg0, arg1)
}

// Preload mocks base method
func (m *MockInterface) Preload(arg0 string, arg1 ...interface{}) jorm.Interface {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Preload", varargs...)
	ret0, _ := ret[0].(jorm.Interface)
	return ret0
}

// Preload indicates an expected call of Preload
func (mr *MockInterfaceMockRecorder) Preload(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Preload", reflect.TypeOf((*MockInterface)(nil).Preload), varargs...)
}

// Raw mocks base method
func (m *MockInterface) Raw(arg0 string, arg1 ...interface{}) jorm.Interface {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Raw", varargs...)
	ret0, _ := ret[0].(jorm.Interface)
	return ret0
}

// Raw indicates an expected call of Raw
func (mr *MockInterfaceMockRecorder) Raw(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Raw", reflect.TypeOf((*MockInterface)(nil).Raw), varargs...)
}

// RecordNotFound mocks base method
func (m *MockInterface) RecordNotFound() bool {
	ret := m.ctrl.Call(m, "RecordNotFound")
	ret0, _ := ret[0].(bool)
	return ret0
}

// RecordNotFound indicates an expected call of RecordNotFound
func (mr *MockInterfaceMockRecorder) RecordNotFound() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordNotFound", reflect.TypeOf((*MockInterface)(nil).RecordNotFound))
}

// Related mocks base method
func (m *MockInterface) Related(arg0 interface{}, arg1 ...string) jorm.Interface {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Related", varargs...)
	ret0, _ := ret[0].(jorm.Interface)
	return ret0
}

// Related indicates an expected call of Related
func (mr *MockInterfaceMockRecorder) Related(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Related", reflect.TypeOf((*MockInterface)(nil).Related), varargs...)
}

// RemoveForeignKey mocks base method
func (m *MockInterface) RemoveForeignKey(arg0, arg1 string) jorm.Interface {
	ret := m.ctrl.Call(m, "RemoveForeignKey", arg0, arg1)
	ret0, _ := ret[0].(jorm.Interface)
	return ret0
}

// RemoveForeignKey indicates an expected call of RemoveForeignKey
func (mr *MockInterfaceMockRecorder) RemoveForeignKey(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveForeignKey", reflect.TypeOf((*MockInterface)(nil).RemoveForeignKey), arg0, arg1)
}

// RemoveIndex mocks base method
func (m *MockInterface) RemoveIndex(arg0 string) jorm.Interface {
	ret := m.ctrl.Call(m, "RemoveIndex", arg0)
	ret0, _ := ret[0].(jorm.Interface)
	return ret0
}

// RemoveIndex indicates an expected call of RemoveIndex
func (mr *MockInterfaceMockRecorder) RemoveIndex(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveIndex", reflect.TypeOf((*MockInterface)(nil).RemoveIndex), arg0)
}

// Rollback mocks base method
func (m *MockInterface) Rollback() jorm.Interface {
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(jorm.Interface)
	return ret0
}

// Rollback indicates an expected call of Rollback
func (mr *MockInterfaceMockRecorder) Rollback() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockInterface)(nil).Rollback))
}

// Row mocks base method
func (m *MockInterface) Row() jorm.Row {
	ret := m.ctrl.Call(m, "Row")
	ret0, _ := ret[0].(jorm.Row)
	return ret0
}

// Row indicates an expected call of Row
func (mr *MockInterfaceMockRecorder) Row() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Row", reflect.TypeOf((*MockInterface)(nil).Row))
}

// Rows mocks base method
func (m *MockInterface) Rows() (jorm.Rows, error) {
	ret := m.ctrl.Call(m, "Rows")
	ret0, _ := ret[0].(jorm.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Rows indicates an expected call of Rows
func (mr *MockInterfaceMockRecorder) Rows() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rows", reflect.TypeOf((*MockInterface)(nil).Rows))
}

// RowsAffected mocks base method
func (m *MockInterface) RowsAffected() int64 {
	ret := m.ctrl.Call(m, "RowsAffected")
	ret0, _ := ret[0].(int64)
	return ret0
}

// RowsAffected indicates an expected call of RowsAffected
func (mr *MockInterfaceMockRecorder) RowsAffected() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RowsAffected", reflect.TypeOf((*MockInterface)(nil).RowsAffected))
}

// Save mocks base method
func (m *MockInterface) Save(arg0 interface{}) jorm.Interface {
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(jorm.Interface)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockInterfaceMockRecorder) Save(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockInterface)(nil).Save), arg0)
}

// Scan mocks base method
func (m *MockInterface) Scan(arg0 interface{}) jorm.Interface {
	ret := m.ctrl.Call(m, "Scan", arg0)
	ret0, _ := ret[0].(jorm.Interface)
	return ret0
}

// Scan indicates an expected call of Scan
func (mr *MockInterfaceMockRecorder) Scan(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockInterface)(nil).Scan), arg0)
}

// ScanRows mocks base method
func (m *MockInterface) ScanRows(arg0 *sql.Rows, arg1 interface{}) error {
	ret := m.ctrl.Call(m, "ScanRows", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScanRows indicates an expected call of ScanRows
func (mr *MockInterfaceMockRecorder) ScanRows(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanRows", reflect.TypeOf((*MockInterface)(nil).ScanRows), arg0, arg1)
}

// Scopes mocks base method
func (m *MockInterface) Scopes(arg0 ...func(*gorm.DB) *gorm.DB) jorm.Interface {
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Scopes", varargs...)
	ret0, _ := ret[0].(jorm.Interface)
	return ret0
}

// Scopes indicates an expected call of Scopes
func (mr *MockInterfaceMockRecorder) Scopes(arg0 ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scopes", reflect.TypeOf((*MockInterface)(nil).Scopes), arg0...)
}

// Select mocks base method
func (m *MockInterface) Select(arg0 interface{}, arg1 ...interface{}) jorm.Interface {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Select", varargs...)
	ret0, _ := ret[0].(jorm.Interface)
	return ret0
}

// Select indicates an expected call of Select
func (mr *MockInterfaceMockRecorder) Select(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockInterface)(nil).Select), varargs...)
}

// Set mocks base method
func (m *MockInterface) Set(arg0 string, arg1 interface{}) jorm.Interface {
	ret := m.ctrl.Call(m, "Set", arg0, arg1)
	ret0, _ := ret[0].(jorm.Interface)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockInterfaceMockRecorder) Set(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockInterface)(nil).Set), arg0, arg1)
}

// SetJoinTableHandler mocks base method
func (m *MockInterface) SetJoinTableHandler(arg0 interface{}, arg1 string, arg2 gorm.JoinTableHandlerInterface) {
	m.ctrl.Call(m, "SetJoinTableHandler", arg0, arg1, arg2)
}

// SetJoinTableHandler indicates an expected call of SetJoinTableHandler
func (mr *MockInterfaceMockRecorder) SetJoinTableHandler(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetJoinTableHandler", reflect.TypeOf((*MockInterface)(nil).SetJoinTableHandler), arg0, arg1, arg2)
}

// SetLogger mocks base method
func (m *MockInterface) SetLogger(arg0 mysql.Logger) {
	m.ctrl.Call(m, "SetLogger", arg0)
}

// SetLogger indicates an expected call of SetLogger
func (mr *MockInterfaceMockRecorder) SetLogger(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLogger", reflect.TypeOf((*MockInterface)(nil).SetLogger), arg0)
}

// SingularTable mocks base method
func (m *MockInterface) SingularTable(arg0 bool) {
	m.ctrl.Call(m, "SingularTable", arg0)
}

// SingularTable indicates an expected call of SingularTable
func (mr *MockInterfaceMockRecorder) SingularTable(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SingularTable", reflect.TypeOf((*MockInterface)(nil).SingularTable), arg0)
}

// Table mocks base method
func (m *MockInterface) Table(arg0 string) jorm.Interface {
	ret := m.ctrl.Call(m, "Table", arg0)
	ret0, _ := ret[0].(jorm.Interface)
	return ret0
}

// Table indicates an expected call of Table
func (mr *MockInterfaceMockRecorder) Table(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Table", reflect.TypeOf((*MockInterface)(nil).Table), arg0)
}

// Take mocks base method
func (m *MockInterface) Take(arg0 interface{}, arg1 ...interface{}) jorm.Interface {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Take", varargs...)
	ret0, _ := ret[0].(jorm.Interface)
	return ret0
}

// Take indicates an expected call of Take
func (mr *MockInterfaceMockRecorder) Take(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Take", reflect.TypeOf((*MockInterface)(nil).Take), varargs...)
}

// Unscoped mocks base method
func (m *MockInterface) Unscoped() jorm.Interface {
	ret := m.ctrl.Call(m, "Unscoped")
	ret0, _ := ret[0].(jorm.Interface)
	return ret0
}

// Unscoped indicates an expected call of Unscoped
func (mr *MockInterfaceMockRecorder) Unscoped() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unscoped", reflect.TypeOf((*MockInterface)(nil).Unscoped))
}

// Update mocks base method
func (m *MockInterface) Update(arg0 ...interface{}) jorm.Interface {
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(jorm.Interface)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockInterfaceMockRecorder) Update(arg0 ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockInterface)(nil).Update), arg0...)
}

// UpdateColumn mocks base method
func (m *MockInterface) UpdateColumn(arg0 ...interface{}) jorm.Interface {
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateColumn", varargs...)
	ret0, _ := ret[0].(jorm.Interface)
	return ret0
}

// UpdateColumn indicates an expected call of UpdateColumn
func (mr *MockInterfaceMockRecorder) UpdateColumn(arg0 ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateColumn", reflect.TypeOf((*MockInterface)(nil).UpdateColumn), arg0...)
}

// UpdateColumns mocks base method
func (m *MockInterface) UpdateColumns(arg0 interface{}) jorm.Interface {
	ret := m.ctrl.Call(m, "UpdateColumns", arg0)
	ret0, _ := ret[0].(jorm.Interface)
	return ret0
}

// UpdateColumns indicates an expected call of UpdateColumns
func (mr *MockInterfaceMockRecorder) UpdateColumns(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateColumns", reflect.TypeOf((*MockInterface)(nil).UpdateColumns), arg0)
}

// Updates mocks base method
func (m *MockInterface) Updates(arg0 interface{}, arg1 ...bool) jorm.Interface {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Updates", varargs...)
	ret0, _ := ret[0].(jorm.Interface)
	return ret0
}

// Updates indicates an expected call of Updates
func (mr *MockInterfaceMockRecorder) Updates(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Updates", reflect.TypeOf((*MockInterface)(nil).Updates), varargs...)
}

// Value mocks base method
func (m *MockInterface) Value() interface{} {
	ret := m.ctrl.Call(m, "Value")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Value indicates an expected call of Value
func (mr *MockInterfaceMockRecorder) Value() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockInterface)(nil).Value))
}

// Where mocks base method
func (m *MockInterface) Where(arg0 interface{}, arg1 ...interface{}) jorm.Interface {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Where", varargs...)
	ret0, _ := ret[0].(jorm.Interface)
	return ret0
}

// Where indicates an expected call of Where
func (mr *MockInterfaceMockRecorder) Where(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Where", reflect.TypeOf((*MockInterface)(nil).Where), varargs...)
}

// WithContext mocks base method
func (m *MockInterface) WithContext(arg0 context.Context) jorm.Interface {
	ret := m.ctrl.Call(m, "WithContext", arg0)
	ret0, _ := ret[0].(jorm.Interface)
	return ret0
}

// WithContext indicates an expected call of WithContext
func (mr *MockInterfaceMockRecorder) WithContext(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithContext", reflect.TypeOf((*MockInterface)(nil).WithContext), arg0)
}

// MockRow is a mock of Row interface
type MockRow struct {
	ctrl     *gomock.Controller
	recorder *MockRowMockRecorder
}

// MockRowMockRecorder is the mock recorder for MockRow
type MockRowMockRecorder struct {
	mock *MockRow
}

// NewMockRow creates a new mock instance
func NewMockRow(ctrl *gomock.Controller) *MockRow {
	mock := &MockRow{ctrl: ctrl}
	mock.recorder = &MockRowMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRow) EXPECT() *MockRowMockRecorder {
	return m.recorder
}

// Scan mocks base method
func (m *MockRow) Scan(arg0 ...interface{}) error {
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Scan", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan
func (mr *MockRowMockRecorder) Scan(arg0 ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockRow)(nil).Scan), arg0...)
}

// MockRows is a mock of Rows interface
type MockRows struct {
	ctrl     *gomock.Controller
	recorder *MockRowsMockRecorder
}

// MockRowsMockRecorder is the mock recorder for MockRows
type MockRowsMockRecorder struct {
	mock *MockRows
}

// NewMockRows creates a new mock instance
func NewMockRows(ctrl *gomock.Controller) *MockRows {
	mock := &MockRows{ctrl: ctrl}
	mock.recorder = &MockRowsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRows) EXPECT() *MockRowsMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockRows) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockRowsMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRows)(nil).Close))
}

// ColumnTypes mocks base method
func (m *MockRows) ColumnTypes() ([]*sql.ColumnType, error) {
	ret := m.ctrl.Call(m, "ColumnTypes")
	ret0, _ := ret[0].([]*sql.ColumnType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ColumnTypes indicates an expected call of ColumnTypes
func (mr *MockRowsMockRecorder) ColumnTypes() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ColumnTypes", reflect.TypeOf((*MockRows)(nil).ColumnTypes))
}

// Columns mocks base method
func (m *MockRows) Columns() ([]string, error) {
	ret := m.ctrl.Call(m, "Columns")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Columns indicates an expected call of Columns
func (mr *MockRowsMockRecorder) Columns() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Columns", reflect.TypeOf((*MockRows)(nil).Columns))
}

// Err mocks base method
func (m *MockRows) Err() error {
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err
func (mr *MockRowsMockRecorder) Err() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockRows)(nil).Err))
}

// Next mocks base method
func (m *MockRows) Next() bool {
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next
func (mr *MockRowsMockRecorder) Next() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockRows)(nil).Next))
}

// NextResultSet mocks base method
func (m *MockRows) NextResultSet() bool {
	ret := m.ctrl.Call(m, "NextResultSet")
	ret0, _ := ret[0].(bool)
	return ret0
}

// NextResultSet indicates an expected call of NextResultSet
func (mr *MockRowsMockRecorder) NextResultSet() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextResultSet", reflect.TypeOf((*MockRows)(nil).NextResultSet))
}

// Scan mocks base method
func (m *MockRows) Scan(arg0 ...interface{}) error {
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Scan", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan
func (mr *MockRowsMockRecorder) Scan(arg0 ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockRows)(nil).Scan), arg0...)
}
